# Copyright (c) 2019, UK HealthCare (https://ukhealthcare.uky.edu) All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: wso2is-conf
data:
  carbon.xml: |
    <?xml version="1.0" encoding="ISO-8859-1"?>
    <!--
     Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
    -->

    <!--
        This is the main server configuration file

        ${carbon.home} represents the carbon.home system property.
        Other system properties can be specified in a similar manner.
    -->
    <Server xmlns="http://wso2.org/projects/carbon/carbon.xml">

        <!--
           Product Name
        -->
        <Name>WSO2 Identity Server</Name>

        <!--
           machine readable unique key to identify each product
        -->
        <ServerKey>IS</ServerKey>

        <!--
           Product Version
        -->
        <Version>5.8.0</Version>

        <!--
           Host name or IP address of the machine hosting this server
           e.g. www.wso2.org, 192.168.1.10
           This is will become part of the End Point Reference of the
           services deployed on this server instance.
        -->
        <HostName>wso2is</HostName>

        <!--
        Host name to be used for the Carbon management console
        -->
        <MgtHostName>wso2is</MgtHostName>

        <!--
            The URL of the back end server. This is where the admin services are hosted and
            will be used by the clients in the front end server.
            This is required only for the Front-end server. This is used when seperating BE server from FE server
           -->
        <ServerURL>local:/${carbon.context}/services/</ServerURL>
        <!--
        <ServerURL>https://localhost:${carbon.management.port}${carbon.context}/services/</ServerURL>
        -->
         <!--
         The URL of the index page. This is where the user will be redirected after signing in to the
         carbon server.
         -->
        <!-- IndexPageURL>/carbon/admin/index.jsp</IndexPageURL-->

        <!--
        For cApp deployment, we have to identify the roles that can be acted by the current server.
        The following property is used for that purpose. Any number of roles can be defined here.
        Regular expressions can be used in the role.
        Ex : <Role>.*</Role> means this server can act any role
        -->
        <ServerRoles>
            <Role>IdentityServer</Role>
        </ServerRoles>

        <!-- uncommnet this line to subscribe to a bam instance automatically -->
        <!--<BamServerURL>https://bamhost:bamport/services/</BamServerURL>-->

        <!--
           The fully qualified name of the server
        -->
        <Package>org.wso2.carbon</Package>

        <!--
           Webapp context root of WSO2 Carbon management console.
        -->
        <WebContextRoot>/</WebContextRoot>

        <!--
        	Proxy context path is a useful parameter to add a proxy path when a Carbon server is fronted by reverse proxy. In addtion
            to the proxy host and proxy port this parameter allows you add a path component to external URLs. e.g.
         		URL of the Carbon server -> https://10.100.1.1:9443/carbon
       		URL of the reverse proxy -> https://prod.abc.com/appserver/carbon

       	appserver - proxy context path. This specially required whenever you are generating URLs to displace in
       	Carbon UI components.
        -->
        <!--
        	<MgtProxyContextPath></MgtProxyContextPath>
        	<ProxyContextPath></ProxyContextPath>
        -->

        <!-- In-order to  get the registry http Port from the back-end when the default http transport is not the same-->
        <!--RegistryHttpPort>9763</RegistryHttpPort-->

        <!--
        Number of items to be displayed on a management console page. This is used at the
        backend server for pagination of various items.
        -->
        <ItemsPerPage>15</ItemsPerPage>

        <!-- The endpoint URL of the cloud instance management Web service -->
        <!--<InstanceMgtWSEndpoint>https://ec2.amazonaws.com/</InstanceMgtWSEndpoint>-->

        <!--
           Ports used by this server
        -->
        <Ports>

            <!-- Ports offset. This entry will set the value of the ports defined below to
             the define value + Offset.
             e.g. Offset=2 and HTTPS port=9443 will set the effective HTTPS port to 9445
             -->
            <Offset>0</Offset>

            <!-- The JMX Ports -->
            <JMX>
                <!--The port RMI registry is exposed-->
                <RMIRegistryPort>9999</RMIRegistryPort>
                <!--The port RMI server should be exposed-->
                <RMIServerPort>11111</RMIServerPort>
            </JMX>

            <!-- Embedded LDAP server specific ports -->
            <EmbeddedLDAP>
                <!-- Disable the LDAP server when you change the primary user store -->
                <Property name="enable">false</Property>
                <!-- Port which embedded LDAP server runs -->
                <LDAPServerPort>10389</LDAPServerPort>
                <!-- Port which KDC (Kerberos Key Distribution Center) server runs -->
                <KDCServerPort>8000</KDCServerPort>
            </EmbeddedLDAP>

    	<!--
                 Override datasources JNDIproviderPort defined in bps.xml and datasources.properties files
    	-->
    	<!--<JNDIProviderPort>2199</JNDIProviderPort>-->
    	<!--Override receive port of thrift based entitlement service.-->
    	<ThriftEntitlementReceivePort>10500</ThriftEntitlementReceivePort>

        <!--
         This is the proxy port of the worker cluster. These need to be configured in a scenario where
         manager node is not exposed through the load balancer through which the workers are exposed
         therefore doesn't have a proxy port.
        <WorkerHttpProxyPort>80</WorkerHttpProxyPort>
        <WorkerHttpsProxyPort>443</WorkerHttpsProxyPort>
        -->

        </Ports>

        <!--
            JNDI Configuration
        -->
        <JNDI>
            <!--
                 The fully qualified name of the default initial context factory
            -->
            <DefaultInitialContextFactory>org.wso2.carbon.tomcat.jndi.CarbonJavaURLContextFactory</DefaultInitialContextFactory>
            <!--
                 The restrictions that are done to various JNDI Contexts in a Multi-tenant environment
            -->
            <Restrictions>
                <!--
                    Contexts that will be available only to the super-tenant
                -->
                <!-- <SuperTenantOnly>
                    <UrlContexts>
                        <UrlContext>
                            <Scheme>foo</Scheme>
                        </UrlContext>
                        <UrlContext>
                            <Scheme>bar</Scheme>
                        </UrlContext>
                    </UrlContexts>
                </SuperTenantOnly> -->
                <!--
                    Contexts that are common to all tenants
                -->
                <AllTenants>
                    <UrlContexts>
                        <UrlContext>
                            <Scheme>java</Scheme>
                        </UrlContext>
                        <!-- <UrlContext>
                            <Scheme>foo</Scheme>
                        </UrlContext> -->
                    </UrlContexts>
                </AllTenants>
                <!--
                     All other contexts not mentioned above will be available on a per-tenant basis
                     (i.e. will not be shared among tenants)
                -->
            </Restrictions>
        </JNDI>

        <!--
            Property to determine if the server is running an a cloud deployment environment.
            This property should only be used to determine deployment specific details that are
            applicable only in a cloud deployment, i.e when the server deployed *-as-a-service.
        -->
        <IsCloudDeployment>false</IsCloudDeployment>

        <!--
    	Property to determine whether usage data should be collected for metering purposes
        -->
        <EnableMetering>false</EnableMetering>

        <!-- The Max time a thread should take for execution in seconds -->
        <MaxThreadExecutionTime>600</MaxThreadExecutionTime>

        <!--
            A flag to enable or disable Ghost Deployer. By default this is set to false. That is
            because the Ghost Deployer works only with the HTTP/S transports. If you are using
            other transports, don't enable Ghost Deployer.
        -->
        <GhostDeployment>
            <Enabled>false</Enabled>
        </GhostDeployment>


        <!--
            Eager loading or lazy loading is a design pattern commonly used in computer programming which
            will initialize an object upon creation or load on-demand. In carbon, lazy loading is used to
            load tenant when a request is received only. Similarly Eager loading is used to enable load
            existing tenants after carbon server starts up. Using this feature, you will be able to include
            or exclude tenants which are to be loaded when server startup.

            We can enable only one LoadingPolicy at a given time.

            1. Tenant Lazy Loading
               This is the default behaviour and enabled by default. With this policy, tenants are not loaded at
               server startup, but loaded based on-demand (i.e when a request is received for a tenant).
               The default tenant idle time is 30 minutes.

            2. Tenant Eager Loading
               This is by default not enabled. It can be be enabled by un-commenting the <EagerLoading> section.
               The eager loading configurations supported are as below. These configurations can be given as the
               value for <Include> element with eager loading.
                    (i)Load all tenants when server startup             -   *
                    (ii)Load all tenants except foo.com & bar.com       -   *,!foo.com,!bar.com
                    (iii)Load only foo.com &  bar.com to be included    -   foo.com,bar.com
        -->
        <Tenant>
            <LoadingPolicy>
                <LazyLoading>
                    <IdleTime>30</IdleTime>
                </LazyLoading>
                <!-- <EagerLoading>
                       <Include>*,!foo.com,!bar.com</Include>
                </EagerLoading>-->
            </LoadingPolicy>

            <!-- Flag to enable or disable tenant deletion. By default tenant deletion is enabled-->
            <TenantDelete>true</TenantDelete>

            <!-- Configurations related to listener invocation by tenant admin service-->
            <ListenerInvocationPolicy>
                <!-- Flag to enable or disable listener invocation on tenant delete. This is disabled by default-->
                <InvokeOnDelete>false</InvokeOnDelete>
            </ListenerInvocationPolicy>
        </Tenant>

        <!--
         Caching related configurations
        -->
        <Cache>
            <!-- Default cache timeout in minutes -->
            <DefaultCacheTimeout>15</DefaultCacheTimeout>
            <!-- Force all caches to act as local -->
            <ForceLocalCache>true</ForceLocalCache>
        </Cache>

        <!--
        Axis2 related configurations
        -->
        <Axis2Config>
            <!--
                 Location of the Axis2 Services & Modules repository

                 This can be a directory in the local file system, or a URL.

                 e.g.
                 1. /home/wso2wsas/repository/ - An absolute path
                 2. repository - In this case, the path is relative to CARBON_HOME
                 3. file:///home/wso2wsas/repository/
                 4. http://wso2wsas/repository/
            -->
            <RepositoryLocation>${carbon.home}/repository/deployment/server/</RepositoryLocation>

            <!--
             Deployment update interval in seconds. This is the interval between repository listener
             executions.
            -->
            <DeploymentUpdateInterval>15</DeploymentUpdateInterval>

            <!--
                Location of the main Axis2 configuration descriptor file, a.k.a. axis2.xml file

                This can be a file on the local file system, or a URL

                e.g.
                1. /home/repository/axis2.xml - An absolute path
                2. conf/axis2.xml - In this case, the path is relative to CARBON_HOME
                3. file:///home/carbon/repository/axis2.xml
                4. http://repository/conf/axis2.xml
            -->
            <ConfigurationFile>${carbon.home}/repository/conf/axis2/axis2.xml</ConfigurationFile>

            <!--
              ServiceGroupContextIdleTime, which will be set in ConfigurationContex
              for multiple clients which are going to access the same ServiceGroupContext
              Default Value is 30 Sec.
            -->
            <ServiceGroupContextIdleTime>30000</ServiceGroupContextIdleTime>

            <!--
              This repository location is used to crete the client side configuration
              context used by the server when calling admin services.
            -->
            <ClientRepositoryLocation>${carbon.home}/repository/deployment/client/</ClientRepositoryLocation>
            <!-- This axis2 xml is used in createing the configuration context by the FE server
             calling to BE server -->
            <clientAxis2XmlLocation>${carbon.home}/repository/conf/axis2/axis2_client.xml</clientAxis2XmlLocation>
            <!-- If this parameter is set, the ?wsdl on an admin service will not give the admin service wsdl. -->
            <HideAdminServiceWSDLs>true</HideAdminServiceWSDLs>

    	<!--WARNING-Use With Care! Uncommenting bellow parameter would expose all AdminServices in HTTP transport.
    	With HTTP transport your credentials and data routed in public channels are vulnerable for sniffing attacks.
    	Use bellow parameter ONLY if your communication channels are confirmed to be secured by other means -->
            <!--HttpAdminServices>*</HttpAdminServices-->

        </Axis2Config>

        <!--
           The default user roles which will be created when the server
           is started up for the first time.
        -->
        <ServiceUserRoles>
            <Role>
                <Name>admin</Name>
                <Description>Default Administrator Role</Description>
            </Role>
            <Role>
                <Name>user</Name>
                <Description>Default User Role</Description>
            </Role>
        </ServiceUserRoles>

        <!--
           Configurations related to Carbon Crypto Service which is a crypto framework used inside Carbon products.
        -->
        <CryptoService>

            <Enabled>true</Enabled>

            <!-- The crypto provider which is used for internal data encryption and decryption -->
            <InternalCryptoProviderClassName>org.wso2.carbon.crypto.provider.KeyStoreBasedInternalCryptoProvider</InternalCryptoProviderClassName>

            <!--
                The crypto provider which is used for the crypto needs which come when communicating with external parties.
                e.g. Signing, Decrypting.
            -->
            <ExternalCryptoProviderClassName>org.wso2.carbon.core.encryption.KeyStoreBasedExternalCryptoProvider</ExternalCryptoProviderClassName>

            <!--
                The list of key resolvers which will be used based on the context when handling crypto with external parties.

                e.g. Resolving the public key of an external entity.
            -->
            <KeyResolvers>
                <KeyResolver className="org.wso2.carbon.crypto.defaultProvider.resolver.ContextIndependentKeyResolver" priority="-1"/>
            </KeyResolvers>

        </CryptoService>

        <!--
          Enable following config to allow Emails as usernames.
        -->
        <!--EnableEmailUserName>true</EnableEmailUserName-->
        <!--EnablePasswordTrim>false</EnablePasswordTrim-->
        <!--
          Security configurations
        -->
        <Security>
            <!--
                KeyStore which will be used for encrypting/decrypting passwords
                and other sensitive information.
            -->
            <KeyStore>
                <!-- Keystore file location-->
                <Location>${carbon.home}/repository/resources/security/wso2carbon.jks</Location>
                <!-- Keystore type (JKS/PKCS12 etc.)-->
                <Type>JKS</Type>
                <!-- Keystore password-->
                <Password>wso2carbon</Password>
                <!-- Private Key alias-->
                <KeyAlias>wso2carbon</KeyAlias>
                <!-- Private Key password-->
                <KeyPassword>wso2carbon</KeyPassword>
            </KeyStore>

            <!--
                The KeyStore which is used for encrypting/decrypting internal data.
                This block is read by Carbon Crypto Service.
            -->
            <InternalKeyStore>
                <!-- Keystore file location-->
                <Location>${carbon.home}/repository/resources/security/wso2carbon.jks</Location>
                <!-- Keystore type (JKS/PKCS12 etc.)-->
                <Type>JKS</Type>
                <!-- Keystore password-->
                <Password>wso2carbon</Password>
                <!-- Private Key alias-->
                <KeyAlias>wso2carbon</KeyAlias>
                <!-- Private Key password-->
                <KeyPassword>wso2carbon</KeyPassword>
            </InternalKeyStore>

            <!--
                System wide trust-store which is used to maintain the certificates of all
                the trusted parties.
            -->
            <TrustStore>
                <!-- trust-store file location -->
                <Location>${carbon.home}/repository/resources/security/client-truststore.jks</Location>
                <!-- trust-store type (JKS/PKCS12 etc.) -->
                <Type>JKS</Type>
                <!-- trust-store password -->
                <Password>wso2carbon</Password>
            </TrustStore>

            <!--
                The Authenticator configuration to be used at the JVM level. We extend the
                java.net.Authenticator to make it possible to authenticate to given servers and
                proxies.
            -->
            <NetworkAuthenticatorConfig>
                <!--
                    Below is a sample configuration for a single authenticator. Please note that
                    all child elements are mandatory. Not having some child elements would lead to
                    exceptions at runtime.
                -->
                <!-- <Credential> -->
                    <!--
                        the pattern that would match a subset of URLs for which this authenticator
                        would be used
                    -->
                    <!-- <Pattern>regularExpression</Pattern> -->
                    <!--
                        the type of this authenticator. Allowed values are:
                        1. server
                        2. proxy
                    -->
                    <!-- <Type>proxy</Type> -->
                    <!-- the username used to log in to server/proxy -->
                    <!-- <Username>username</Username> -->
                    <!-- the password used to log in to server/proxy -->
                    <!-- <Password>password</Password> -->
                <!-- </Credential> -->
            </NetworkAuthenticatorConfig>

            <!--
             The Tomcat realm to be used for hosted Web applications. Allowed values are;
             1. UserManager
             2. Memory

             If this is set to 'UserManager', the realm will pick users & roles from the system's
             WSO2 User Manager. If it is set to 'memory', the realm will pick users & roles from
             CARBON_HOME/repository/conf/tomcat/tomcat-users.xml
            -->
            <TomcatRealm>UserManager</TomcatRealm>

    	<!--Option to disable storing of tokens issued by STS-->
    	<DisableTokenStore>false</DisableTokenStore>

     <STSCallBackHandlerName>org.wso2.carbon.identity.provider.AttributeCallbackHandler</STSCallBackHandlerName>

    	<!--
    	 Security token store class name. If this is not set, default class will be
    	 org.wso2.carbon.security.util.SecurityTokenStore
    	-->
    	<TokenStoreClassName>org.wso2.carbon.identity.sts.store.DBTokenStore</TokenStoreClassName>

            <XSSPreventionConfig>
                <Enabled>true</Enabled>
                <Rule>allow</Rule>
                <Patterns>
                    <!--Pattern></Pattern-->
                </Patterns>
            </XSSPreventionConfig>
        </Security>
    <HideMenuItemIds>
    <HideMenuItemId>claim_mgt_menu</HideMenuItemId>
    <HideMenuItemId>identity_mgt_emailtemplate_menu</HideMenuItemId>
    <HideMenuItemId>identity_security_questions_menu</HideMenuItemId>
    </HideMenuItemIds>

        <!--
           The temporary work directory
        -->
        <WorkDirectory>${carbon.home}/tmp/work</WorkDirectory>

        <!--
           House-keeping configuration
        -->
        <HouseKeeping>

            <!--
               true  - Start House-keeping thread on server startup
               false - Do not start House-keeping thread on server startup.
                       The user will run it manually as and when he wishes.
            -->
            <AutoStart>true</AutoStart>

            <!--
               The interval in *minutes*, between house-keeping runs
            -->
            <Interval>10</Interval>

            <!--
              The maximum time in *minutes*, temp files are allowed to live
              in the system. Files/directories which were modified more than
              "MaxTempFileLifetime" minutes ago will be removed by the
              house-keeping task
            -->
            <MaxTempFileLifetime>30</MaxTempFileLifetime>
        </HouseKeeping>

        <!--
           Configuration for handling different types of file upload & other file uploading related
           config parameters.
           To map all actions to a particular FileUploadExecutor, use
           <Action>*</Action>
        -->
        <FileUploadConfig>
            <!--
               The total file upload size limit in MB
            -->
            <TotalFileSizeLimit>100</TotalFileSizeLimit>

            <Mapping>
                <Actions>
                    <Action>keystore</Action>
                    <Action>certificate</Action>
                    <Action>*</Action>
                </Actions>
                <Class>org.wso2.carbon.ui.transports.fileupload.AnyFileUploadExecutor</Class>
            </Mapping>

            <Mapping>
                <Actions>
                    <Action>jarZip</Action>
                </Actions>
                <Class>org.wso2.carbon.ui.transports.fileupload.JarZipUploadExecutor</Class>
            </Mapping>
            <Mapping>
                <Actions>
                    <Action>dbs</Action>
                </Actions>
                <Class>org.wso2.carbon.ui.transports.fileupload.DBSFileUploadExecutor</Class>
            </Mapping>
            <Mapping>
                <Actions>
                    <Action>tools</Action>
                </Actions>
                <Class>org.wso2.carbon.ui.transports.fileupload.ToolsFileUploadExecutor</Class>
            </Mapping>
            <Mapping>
                <Actions>
                    <Action>toolsAny</Action>
                </Actions>
                <Class>org.wso2.carbon.ui.transports.fileupload.ToolsAnyFileUploadExecutor</Class>
            </Mapping>
        </FileUploadConfig>

        <!-- FileNameRegEx is used to validate the file input/upload/write-out names.
        e.g.
         <FileNameRegEx>^(?!(?:CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(?:\.[^.])?$)[^&lt;&gt:"/\\|?*\x00-\x1F][^&lt;&gt:"/\\|?*\x00-\x1F\ .]$</FileNameRegEx>
        -->
        <!--<FileNameRegEx></FileNameRegEx>-->

        <!--
           Processors which process special HTTP GET requests such as ?wsdl, ?policy etc.

           In order to plug in a processor to handle a special request, simply add an entry to this
           section.

           The value of the Item element is the first parameter in the query string(e.g. ?wsdl)
           which needs special processing

           The value of the Class element is a class which implements
           org.wso2.carbon.transport.HttpGetRequestProcessor
        -->
        <HttpGetRequestProcessors>
            <Processor>
                <Item>info</Item>
                <Class>org.wso2.carbon.core.transports.util.InfoProcessor</Class>
            </Processor>
            <Processor>
                <Item>wsdl</Item>
                <Class>org.wso2.carbon.core.transports.util.Wsdl11Processor</Class>
            </Processor>
            <Processor>
                <Item>wsdl2</Item>
                <Class>org.wso2.carbon.core.transports.util.Wsdl20Processor</Class>
            </Processor>
            <Processor>
                <Item>xsd</Item>
                <Class>org.wso2.carbon.core.transports.util.XsdProcessor</Class>
            </Processor>
        </HttpGetRequestProcessors>

        <!-- Deployment Synchronizer Configuration. Enable value to true when running with "svn based" dep sync.
    	In master nodes you need to set both AutoCommit and AutoCheckout to true
    	and in  worker nodes set only AutoCheckout to true.
        -->
        <DeploymentSynchronizer>
            <Enabled>false</Enabled>
            <AutoCommit>false</AutoCommit>
            <AutoCheckout>true</AutoCheckout>
            <RepositoryType>svn</RepositoryType>
            <SvnUrl>http://svnrepo.example.com/repos/</SvnUrl>
            <SvnUser>username</SvnUser>
            <SvnPassword>password</SvnPassword>
            <SvnUrlAppendTenantId>true</SvnUrlAppendTenantId>
        </DeploymentSynchronizer>

        <!-- Mediation persistence configurations. Only valid if mediation features are available i.e. ESB -->
        <!--<MediationConfig>
            <LoadFromRegistry>false</LoadFromRegistry>
            <SaveToFile>false</SaveToFile>
            <Persistence>enabled</Persistence>
            <RegistryPersistence>enabled</RegistryPersistence>
        </MediationConfig>-->

        <!--
        Server intializing code, specified as implementation classes of org.wso2.carbon.core.ServerInitializer.
        This code will be run when the Carbon server is initialized
        -->
        <ServerInitializers>
            <!--<Initializer></Initializer>-->
        </ServerInitializers>

        <!--
        Indicates whether the Carbon Servlet is required by the system, and whether it should be
        registered
        -->
        <RequireCarbonServlet>${require.carbon.servlet}</RequireCarbonServlet>

        <!--
        Carbon H2 OSGI Configuration
        By default non of the servers start.
            name="web" - Start the web server with the H2 Console
            name="webPort" - The port (default: 8082)
            name="webAllowOthers" - Allow other computers to connect
            name="webSSL" - Use encrypted (HTTPS) connections
            name="tcp" - Start the TCP server
            name="tcpPort" - The port (default: 9092)
            name="tcpAllowOthers" - Allow other computers to connect
            name="tcpSSL" - Use encrypted (SSL) connections
            name="pg" - Start the PG server
            name="pgPort"  - The port (default: 5435)
            name="pgAllowOthers"  - Allow other computers to connect
            name="trace" - Print additional trace information; for all servers
            name="baseDir" - The base directory for H2 databases; for all servers
        -->
        <!--H2DatabaseConfiguration>
            <property name="web" />
            <property name="webPort">8082</property>
            <property name="webAllowOthers" />
            <property name="webSSL" />
            <property name="tcp" />
            <property name="tcpPort">9092</property>
            <property name="tcpAllowOthers" />
            <property name="tcpSSL" />
            <property name="pg" />
            <property name="pgPort">5435</property>
            <property name="pgAllowOthers" />
            <property name="trace" />
            <property name="baseDir">${carbon.home}</property>
        </H2DatabaseConfiguration-->
        <!--Disabling statistics reporter by default-->
        <StatisticsReporterDisabled>true</StatisticsReporterDisabled>

        <!-- Enable accessing Admin Console via HTTP -->
        <!-- EnableHTTPAdminConsole>true</EnableHTTPAdminConsole -->

        <!--
           Default Feature Repository of WSO2 Carbon.
        -->
        <FeatureRepository>
    	    <RepositoryName>default repository</RepositoryName>
    	    <RepositoryURL>http://product-dist.wso2.com/p2/carbon/releases/wilkes/</RepositoryURL>
        </FeatureRepository>

        <!--
    	Configure API Management
       -->
       <APIManagement>

    	<!--Uses the embedded API Manager by default. If you want to use an external
    	API Manager instance to manage APIs, configure below  externalAPIManager-->

    	<Enabled>true</Enabled>

    	<!--Uncomment and configure API Gateway and
    	Publisher URLs to use external API Manager instance-->

    	<!--ExternalAPIManager>

    		<APIGatewayURL>http://localhost:8281</APIGatewayURL>
    		<APIPublisherURL>http://localhost:8281/publisher</APIPublisherURL>

    	</ExternalAPIManager-->

    	<LoadAPIContextsInServerStartup>true</LoadAPIContextsInServerStartup>
       </APIManagement>

    </Server>
  user-mgt.xml: |
    <!--
      ~ Copyright WSO2, Inc. (http://wso2.com)
      ~
      ~ Licensed under the Apache License, Version 2.0 (the "License");
      ~ you may not use this file except in compliance with the License.
      ~ You may obtain a copy of the License at
      ~
      ~ http://www.apache.org/licenses/LICENSE-2.0
      ~
      ~ Unless required by applicable law or agreed to in writing, software
      ~ distributed under the License is distributed on an "AS IS" BASIS,
      ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      ~ See the License for the specific language governing permissions and
      ~ limitations under the License.
      -->
            
    <UserManager>
        <Realm>
            <Configuration>
    		    <AddAdmin>true</AddAdmin>
                <AdminRole>admin</AdminRole>
                <AdminUser>
                    <UserName>admin</UserName>
                    <Password>admin</Password>
                </AdminUser>
                <EveryOneRoleName>everyone</EveryOneRoleName> <!-- By default users in this role sees the registry root -->
                !-- Enable username claim retrieve from the UM_USER_NAME in JDBC datasources -->
                <OverrideUsernameClaimFromInternalUsername>true</OverrideUsernameClaimFromInternalUsername>
                <Property name="isCascadeDeleteEnabled">true</Property>
     <Property name="initializeNewClaimManager">true</Property>
                <Property name="dataSource">jdbc/WSO2CarbonDB</Property>
            </Configuration>
    
    	    <!-- Following is the configuration for internal JDBC user store. This user store manager is based on JDBC.
    	         In case if application needs to manage passwords externally set property
    	         <Property name="PasswordsExternallyManaged">true</Property>.
    	         In case if user core cache domain is needed to identify uniquely set property
    	         <Property name="UserCoreCacheIdentifier">domain</Property>.
    	         Furthermore properties, IsEmailUserName and DomainCalculation are readonly properties.
    	         Note: Do not comment within UserStoreManager tags. Cause, specific tag names are used as tokens
    	         when building configurations for products.
    	    -->
            <UserStoreManager class="org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager">
                <Property name="TenantManager">org.wso2.carbon.user.core.tenant.JDBCTenantManager</Property>
                <Property name="ReadOnly">false</Property>
                <Property name="ReadGroups">true</Property>
                <Property name="WriteGroups">true</Property>
                <Property name="UsernameJavaRegEx">^[\S]{3,30}$</Property>
                <Property name="UsernameJavaScriptRegEx">^[\S]{3,30}$</Property>
                <Property name="UsernameJavaRegExViolationErrorMsg">Username pattern policy violated</Property>
                <Property name="PasswordJavaRegEx">^[\S]{5,30}$</Property>
                <Property name="PasswordJavaScriptRegEx">^[\S]{5,30}$</Property>
                <Property name="PasswordJavaRegExViolationErrorMsg">Password length should be within 5 to 30 characters</Property>
                <Property name="RolenameJavaRegEx">^[\S]{3,30}$</Property>
                <Property name="RolenameJavaScriptRegEx">^[\S]{3,30}$</Property>
                <Property name="CaseInsensitiveUsername">false</Property>
                <Property name="SCIMEnabled">false</Property>
                <Property name="IsBulkImportSupported">false</Property>
                <Property name="PasswordDigest">SHA-256</Property>
                <Property name="StoreSaltedPassword">true</Property>
                <Property name="MultiAttributeSeparator">,</Property>
                <Property name="MaxUserNameListLength">100</Property>
                <Property name="MaxRoleNameListLength">100</Property>
                <Property name="UserRolesCacheEnabled">true</Property>
                <Property name="UserNameUniqueAcrossTenants">false</Property>
                <Property name="LeadingOrTrailingSpaceAllowedInUserName">false</Property>
            </UserStoreManager>
    	
    	    <!-- If product is using an external LDAP as the user store in READ ONLY mode, use following user manager.
    		     In case if user core cache domain is needed to identify uniquely set property
    		     <Property name="UserCoreCacheIdentifier">domain</Property>
     	    -->
            <!--UserStoreManager class="org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager">
                <Property name="TenantManager">org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager</Property>
                <Property name="ConnectionURL">ldap://localhost:10389</Property>
                <Property name="ConnectionName">uid=admin,ou=system</Property>
                <Property name="ConnectionPassword">admin</Property>
                <Property name="AnonymousBind">false</Property>
                <Property name="UserSearchBase">ou=system</Property>
                <Property name="UserNameAttribute">uid</Property>
                <Property name="UserNameSearchFilter">(&amp;(objectClass=person)(uid=?))</Property>
                <Property name="UserNameListFilter">(&amp;(objectClass=person)(!(sn=Service)))</Property>
                <Property name="DisplayNameAttribute"/>
                <Property name="ReadGroups">true</Property>
                <Property name="GroupSearchBase">ou=system</Property>
                <Property name="GroupNameAttribute">cn</Property>
                <Property name="GroupNameSearchFilter">(&amp;(objectClass=groupOfNames)(cn=?))</Property>
                <Property name="GroupNameListFilter">(objectClass=groupOfNames)</Property>
                <Property name="MembershipAttribute">member</Property>
                <Property name="BackLinksEnabled">false</Property>
                <Property name="UsernameJavaRegEx">[a-zA-Z0-9._\-|//]{3,30}$</Property>
                <Property name="PasswordJavaRegEx">^[\S]{5,30}$</Property>
                <Property name="RolenameJavaRegEx">[a-zA-Z0-9._\-|//]{3,30}$</Property>
                <Property name="SCIMEnabled">false</Property>
                <Property name="PasswordHashMethod">PLAIN_TEXT</Property>
                <Property name="MultiAttributeSeparator">,</Property>
                <Property name="MaxUserNameListLength">100</Property>
                <Property name="MaxRoleNameListLength">100</Property>
                <Property name="UserRolesCacheEnabled">true</Property>
                <Property name="ConnectionPoolingEnabled">true</Property>
                <Property name="LDAPConnectionTimeout">5000</Property>
                <Property name="ReadTimeout"/>
                <Property name="RetryAttempts"/>
                <Property name="ReplaceEscapeCharactersAtUserLogin">true</Property>
            </UserStoreManager-->
    	
    	    <!-- Active directory configuration is as follows.
    	         In case if user core cache domain is needed to identify uniquely set property
    	         <Property name="UserCoreCacheIdentifier">domain</Property>
    	         There are few special properties for "Active Directory".
    	         They are :
    	         1.Referral - (comment out this property if this feature is not reuired) This enables LDAP referral support.
    	         2.BackLinksEnabled - (Do not comment, set to true or false) In some cases LDAP works with BackLinksEnabled.
    	         In which role is stored at user level. Depending on this value we need to change the Search Base within code.
    	         isADLDSRole - (Do not comment) Set to true if connecting to an AD LDS instance else set to false.
    	    -->
            <!--UserStoreManager class="org.wso2.carbon.user.core.ldap.ActiveDirectoryUserStoreManager">
                <Property name="TenantManager">org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager</Property>
                <Property name="ConnectionURL">ldaps://10.100.1.100:636</Property> 
                <Property name="ConnectionName">CN=admin,CN=Users,DC=WSO2,DC=Com</Property>
                <Property name="ConnectionPassword">A1b2c3d4</Property>
                <Property name="AnonymousBind">false</Property>
                <Property name="UserSearchBase">CN=Users,DC=WSO2,DC=Com</Property>
                <Property name="UserEntryObjectClass">user</Property>
                <Property name="UserNameAttribute">cn</Property>
                <Property name="UserNameSearchFilter">(&amp;(objectClass=user)(cn=?))</Property>
                <Property name="UserNameListFilter">(&amp;(objectClass=user)(!(sn=Service)))</Property>
                <Property name="DisplayNameAttribute"/>
                <Property name="ReadGroups">true</Property>
                <Property name="WriteGroups">true</Property>
                <Property name="GroupSearchBase">CN=Users,DC=WSO2,DC=Com</Property>
                <Property name="GroupEntryObjectClass">group</Property>
                <Property name="GroupNameAttribute">cn</Property>
                <Property name="GroupNameSearchFilter">(&amp;(objectClass=group)(cn=?))</Property>
                <Property name="GroupNameListFilter">(objectcategory=group)</Property>
                <Property name="MembershipAttribute">member</Property>
                <Property name="MemberOfAttribute">memberOf</Property>
                <Property name="BackLinksEnabled">true</Property>
                <Property name="Referral">follow</Property>
                <Property name="UsernameJavaRegEx">[a-zA-Z0-9._\-|//]{3,30}$</Property>
                <Property name="UsernameJavaScriptRegEx">^[\S]{3,30}$</Property>
                <Property name="UsernameJavaRegExViolationErrorMsg">Username pattern policy violated</Property>
                <Property name="PasswordJavaRegEx">^[\S]{5,30}$</Property>
                <Property name="PasswordJavaScriptRegEx">^[\S]{5,30}$</Property>
                <Property name="PasswordJavaRegExViolationErrorMsg">Password length should be within 5 to 30 characters</Property>
                <Property name="RolenameJavaRegEx">[a-zA-Z0-9._\-|//]{3,30}$</Property>
                <Property name="RolenameJavaScriptRegEx">^[\S]{3,30}$</Property>
                <Property name="SCIMEnabled">false</Property>
                <Property name="IsBulkImportSupported">false</Property>
                <Property name="EmptyRolesAllowed">true</Property>
                <Property name="PasswordHashMethod">PLAIN_TEXT</Property>
                <Property name="MultiAttributeSeparator">,</Property>
                <Property name="isADLDSRole">false</Property>
                <Property name="userAccountControl">512</Property>
                <Property name="MaxUserNameListLength">100</Property>     
                <Property name="MaxRoleNameListLength">100</Property>                     
                <Property name="MembershipAttributeRange">1500</Property>
                <Property name="kdcEnabled">false</Property>
                <Property name="defaultRealmName">WSO2.ORG</Property>
                <Property name="UserRolesCacheEnabled">true</Property>
                <Property name="ConnectionPoolingEnabled">false</Property>
                <Property name="LDAPConnectionTimeout">5000</Property>
                <Property name="ReadTimeout"/>
                <Property name="RetryAttempts"/>
                <Property name="StartTLSEnabled">false</Property>
            </UserStoreManager-->
    
            <!-- Following user manager is used by Identity Server (IS) as its default user manager.
                 IS will do token replacement when building the product. Therefore do not change the syntax.
                 If "kdcEnabled" parameter is true, IS will allow service principle management.
                 Thus "ServicePasswordJavaRegEx", "ServiceNameJavaRegEx" properties control the service name format and
                 service password formats. In case if user core cache domain is needed to identify uniquely set property
                 <Property name="UserCoreCacheIdentifier">domain</Property>
            -->
            <UserStoreManager class="org.wso2.carbon.user.core.ldap.ReadWriteLDAPUserStoreManager">
                <Property name="TenantManager">org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager</Property>
                <Property name="ConnectionURL">ldap://localhost:${Ports.EmbeddedLDAP.LDAPServerPort}</Property>
                <Property name="ConnectionName">uid=admin,ou=system</Property>
                <Property name="ConnectionPassword">admin</Property>
                <Property name="AnonymousBind">false</Property>
                <Property name="UserSearchBase">ou=Users,dc=wso2,dc=org</Property>
                <Property name="UserEntryObjectClass">identityPerson</Property>
                <Property name="UserNameAttribute">uid</Property>
                <Property name="UserNameSearchFilter">(&amp;(objectClass=person)(uid=?))</Property>
                <Property name="UserNameListFilter">(&amp;(objectClass=person)(!(sn=Service)))</Property>
                <Property name="DisplayNameAttribute"/>
                <Property name="ReadGroups">true</Property>
                <Property name="WriteGroups">true</Property>
                <Property name="GroupSearchBase">ou=Groups,dc=wso2,dc=org</Property>
                <Property name="GroupEntryObjectClass">groupOfNames</Property>
                <Property name="GroupNameAttribute">cn</Property>
                <Property name="GroupNameSearchFilter">(&amp;(objectClass=groupOfNames)(cn=?))</Property>
                <Property name="GroupNameListFilter">(objectClass=groupOfNames)</Property>
                <Property name="MembershipAttribute">member</Property>
                <Property name="BackLinksEnabled">false</Property>
                <Property name="UsernameJavaRegEx">[a-zA-Z0-9._\-|//]{3,30}$</Property>
                <Property name="UsernameJavaScriptRegEx">^[\S]{3,30}$</Property>
                <Property name="UsernameJavaRegExViolationErrorMsg">Username pattern policy violated</Property>
                <Property name="PasswordJavaRegEx">^[\S]{5,30}$</Property>
                <Property name="PasswordJavaScriptRegEx">^[\S]{5,30}$</Property>
                <Property name="PasswordJavaRegExViolationErrorMsg">Password length should be within 5 to 30 characters</Property>
                <Property name="RolenameJavaRegEx">[a-zA-Z0-9._\-|//]{3,30}$</Property>
                <Property name="RolenameJavaScriptRegEx">^[\S]{3,30}$</Property>
                <Property name="SCIMEnabled">true</Property>
                <Property name="IsBulkImportSupported">false</Property>
                <Property name="EmptyRolesAllowed">true</Property>
                <Property name="PasswordHashMethod">PLAIN_TEXT</Property>
                <Property name="MultiAttributeSeparator">,</Property>
                <Property name="MaxUserNameListLength">100</Property>
                <Property name="MaxRoleNameListLength">100</Property>
                <Property name="kdcEnabled">false</Property>
                <Property name="defaultRealmName">WSO2.ORG</Property>
                <Property name="UserRolesCacheEnabled">true</Property>
                <Property name="ConnectionPoolingEnabled">false</Property>
                <Property name="LDAPConnectionTimeout">5000</Property>
                <Property name="ReadTimeout"/>
                <Property name="RetryAttempts"/>
                <Property name="StartTLSEnabled">false</Property>
            </UserStoreManager>
    
            <AuthorizationManager class="org.wso2.carbon.user.core.authorization.JDBCAuthorizationManager">
                <Property name="AdminRoleManagementPermissions">/permission</Property>
                <Property name="AuthorizationCacheEnabled">true</Property>
                <Property name="GetAllRolesOfUserEnabled">false</Property>
            </AuthorizationManager>
        </Realm>
    </UserManager>
    
    <!--
    
    ************* Description of some of the configuration properties used in user-mgt.xml *********************************
    
    DomainName -
        This property must be used by all secondary user store managers in multiple user store configuration.
        DomainName is a unique identifier given to the user store. Users must provide both the domain name and
        username at log-in as "DomainName\Username"
    
    UserRolesCacheEnabled -
        This is to indicate whether to cache role list of a user. By default it is set to true.
        You may need to disable it if user-roles are changed by external means and need to reflect
        those changes in the carbon product immediately.
    
    ReplaceEscapeCharactersAtUserLogin -
        This is to configure whether escape characters in user name needs to be replaced at user login.
        Currently the identified escape characters that needs to be replaced are '\' & '\\'
    
    UserDNPattern -
        This property will be used when authenticating users. During authentication we do a bind. But if the user is login
        with email address or some other property we need to first lookup LDAP and retrieve DN for the user.
        This involves an additional step.  If UserDNPattern is specified the DN will be constructed using the pattern
        specified in this property. Performance of this is much better than looking up DN and binding user.
    
    RoleDNPattern -
        This property will be used when checking whether user has been assigned to a given role.
        Rather than searching the role in search base, by using this property direct search can be done.
    
    PasswordHashMethod -
        This says how the password should be stored. Allowed values are as follows,
            SHA - Uses SHA digest method
            MD5 - Uses MD 5 digest method
            PLAIN_TEXT - Plain text passwords
            In addition to above this supports all digest methods supported by http://docs.oracle.com/javase/6/docs/api/java/security/MessageDigest.html.
    
    DisplayNameAttribute -
        This is to have a dedicated LDAP attribute to display an entity(User/Role) in UI, in addition to the UserNameAttribute which is used for IS-UserStore interactions.
    -->
  log4j.properties: |
    #
    # Copyright 2009 WSO2, Inc. (http://wso2.com)
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    # http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    #
    
    #
    # This is the log4j configuration file used by WSO2 Carbon
    #
    # IMPORTANT : Please do not remove or change the names of any
    # of the Appenders defined here. The layout pattern & log file
    # can be changed using the WSO2 Carbon Management Console, and those
    # settings will override the settings in this file.
    #
    
    log4j.rootLogger=INFO, CARBON_CONSOLE, CARBON_LOGFILE, CARBON_MEMORY, CARBON_SYS_LOG
    
    log4j.logger.AUDIT_LOG=INFO, AUDIT_LOGFILE
    log4j.logger.DELETE_EVENT_LOGGER=INFO, DELETE_EVENT_LOGFILE
    log4j.logger.TRANSACTION_LOGGER=INFO, TRANSACTION_LOGGER
    log4j.logger.org.apache.axis2.wsdl.codegen.writer.PrettyPrinter=ERROR, CARBON_LOGFILE, CARBON_MEMORY
    log4j.logger.org.apache.axis2.clustering=INFO, CARBON_CONSOLE, CARBON_LOGFILE
    log4j.logger.org.apache=INFO, CARBON_LOGFILE, CARBON_MEMORY
    log4j.logger.org.apache.catalina=WARN
    log4j.logger.org.apache.tomcat=WARN
    log4j.logger.org.wso2.carbon.apacheds=WARN
    log4j.logger.org.apache.directory.server.ldap=ERROR
    log4j.logger.org.apache.directory.server.core.event=WARN
    log4j.logger.com.atomikos=INFO,ATOMIKOS
    log4j.logger.org.quartz=WARN
    log4j.logger.org.apache.jackrabbit.webdav=WARN
    log4j.logger.org.apache.juddi=ERROR
    log4j.logger.org.apache.commons.digester.Digester=WARN
    log4j.logger.org.apache.jasper.compiler.TldLocationsCache=WARN
    log4j.logger.org.apache.qpid=WARN
    log4j.logger.org.apache.qpid.server.Main=INFO
    log4j.logger.qpid.message=WARN
    log4j.logger.qpid.message.broker.listening=INFO
    log4j.logger.org.apache.tiles=WARN
    log4j.logger.org.apache.commons.httpclient=ERROR
    log4j.logger.org.apache.coyote=WARN
    log4j.logger.org.apache.solr=ERROR
    log4j.logger.me.prettyprint.cassandra.hector.TimingLogger=ERROR
    log4j.logger.org.wso2=INFO
    log4j.logger.org.apache.axis2.enterprise=FATAL, CARBON_LOGFILE, CARBON_MEMORY
    log4j.logger.org.apache.directory.shared.ldap=WARN, CARBON_LOGFILE, CARBON_MEMORY
    log4j.logger.org.apache.directory.server.ldap.handlers=WARN, CARBON_LOGFILE, CARBON_MEMORY
    #Following are to remove false error messages from startup (IS)
    log4j.logger.org.apache.directory.shared.ldap.entry.DefaultServerAttribute=FATAL, CARBON_LOGFILE, CARBON_MEMORY
    log4j.logger.org.apache.directory.server.core.DefaultDirectoryService=ERROR, CARBON_LOGFILE, CARBON_MEMORY
    log4j.logger.org.apache.directory.shared.ldap.ldif.LdifReader=ERROR, CARBON_LOGFILE, CARBON_MEMORY
    log4j.logger.org.apache.directory.server.ldap.LdapProtocolHandler=ERROR, CARBON_LOGFILE, CARBON_MEMORY
    log4j.logger.org.apache.directory.server.core=ERROR, CARBON_LOGFILE, CARBON_MEMORY
    log4j.logger.org.apache.directory.server.ldap.LdapSession=ERROR, CARBON_LOGFILE, CARBON_MEMORY
    #Hive Related Log configurations
    log4j.logger.DataNucleus=ERROR
    log4j.logger.Datastore=ERROR
    log4j.logger.Datastore.Schema=ERROR
    log4j.logger.JPOX.Datastore=ERROR
    log4j.logger.JPOX.Plugin=ERROR
    log4j.logger.JPOX.MetaData=ERROR
    log4j.logger.JPOX.Query=ERROR
    log4j.logger.JPOX.General=ERROR
    log4j.logger.JPOX.Enhancer=ERROR
    log4j.logger.org.apache.hadoop.hive=WARN
    log4j.logger.hive=WARN
    log4j.logger.ExecMapper=WARN
    log4j.logger.ExecReducer=WARN
    log4j.logger.net.sf.ehcache=ERROR
    
    log4j.logger.org.springframework=WARN
    log4j.logger.org.opensaml.xml.security.credential.criteria=WARN
    
     #log4j.logger.org.wso2.carbon.user.core=DEBUG
     #log4j.logger.org.wso2.carbon.identity=DEBUG
     #log4j.logger.org.wso2.carbon.identity.sso.saml=DEBUG
     #log4j.logger.org.wso2.carbon.identity.application=DEBUG
     #log4j.logger.org.wso2.carbon.identity.application.authentication.framework=DEBUG
     #log4j.logger.org.wso2.carbon.identity.mgt=DEBUG
     #log4j.logger.org.wso2.carbon.identity.oauth2=DEBUG
     #log4j.logger.org.wso2.carbon.identity.scim=DEBUG
     #log4j.logger.org.wso2.carbon.identity.mgt=DEBUG
     #log4j.logger.org.wso2.carbon.idp.mgt=DEBUG
     #log4j.logger.org.wso2.carbon.identity.provisioning=DEBUG
     #log4j.logger.org.wso2.carbon.identity.user.account.association=DEBUG
     #log4j.logger.org.wso2.carbon.identity.user.profile.mgt=DEBUG
     #log4j.logger.org.wso2.carbon.security=DEBUG
     #log4j.logger.org.wso2.carbon.identity.sso.agent=DEBUG
     #log4j.logger.org.wso2.carbon.identity.core=DEBUG
    
    log4j.logger.trace.messages=TRACE,CARBON_TRACE_LOGFILE
    
    log4j.additivity.org.apache.axis2.clustering=false
    log4j.additivity.com.atomikos=false
    log4j.additivity.org.apache=false
    
    # CARBON_CONSOLE is set to be a ConsoleAppender using a PatternLayout.
    log4j.appender.CARBON_CONSOLE=org.wso2.carbon.utils.logging.appenders.CarbonConsoleAppender
    log4j.appender.CARBON_CONSOLE.layout=org.wso2.carbon.utils.logging.TenantAwarePatternLayout
    # ConversionPattern will be overridden by the configuration setting in the DB
    log4j.appender.CARBON_CONSOLE.layout.ConversionPattern=[%d] %P%5p {%c} - %x %m%n
    log4j.appender.CARBON_CONSOLE.layout.TenantPattern=%U%@%D[%T]
    log4j.appender.CARBON_CONSOLE.threshold=DEBUG
    # Log masking configuration. Please uncomment the following log4j property, if you need to mask any
    # information in your carbon logs.
    # When enabled, the logs will be matched with the  provided patterns and masked .
    # The 'path-to-masking-patterns' path should be an absolute file path to a properties file. This file should contain
    # the patterns that should be checked for masking as key value pairs. (mask-name=masking-regex-pattern)
    # If this file cannot be found, wso2-log-masking.properties file will be used as default. If the following
    # configuration is not enabled, no masking process will be applied.
    #log4j.appender.CARBON_CONSOLE.maskingPatternFile=path-to-masking-patterns
    
    # CARBON_MEMORY is set to be a MemoryAppender using a PatternLayout.
    log4j.appender.CARBON_MEMORY=org.wso2.carbon.logging.service.appender.CarbonMemoryAppender
    log4j.appender.CARBON_MEMORY.layout=org.wso2.carbon.utils.logging.TenantAwarePatternLayout
    log4j.appender.CARBON_MEMORY.bufferSize=200
    # ConversionPattern will be overridden by the configuration setting in the DB
    #log4j.appender.CARBON_MEMORY.layout.ConversionPattern=[%d] %5p - %x %m {%c}%n
    log4j.appender.CARBON_MEMORY.layout.ConversionPattern=TID: [%T] [%S] [%d] %P%5p {%c} - %x %m {%c}%n
    log4j.appender.CARBON_MEMORY.layout.TenantPattern=%U%@%D [%T] [%S]
    log4j.appender.CARBON_MEMORY.columnList=%T,%S,%A,%d,%c,%p,%m,%H,%I,%Stacktrace
    log4j.appender.CARBON_MEMORY.threshold=DEBUG
    
    
    # CARBON_LOGFILE is set to be a DailyRollingFileAppender using a PatternLayout.
    log4j.appender.CARBON_LOGFILE=org.wso2.carbon.utils.logging.appenders.CarbonDailyRollingFileAppender
    # Log file will be overridden by the configuration setting in the DB
    # This path should be relative to WSO2 Carbon Home
    log4j.appender.CARBON_LOGFILE.File=${carbon.home}/repository/logs/${instance.log}/wso2carbon${instance.log}.log
    log4j.appender.CARBON_LOGFILE.Append=true
    log4j.appender.CARBON_LOGFILE.layout=org.wso2.carbon.utils.logging.TenantAwarePatternLayout
    # ConversionPattern will be overridden by the configuration setting in the DB
    log4j.appender.CARBON_LOGFILE.layout.ConversionPattern=TID: [%T] [%S] [%d] %P%5p {%c} - %x %m %n
    log4j.appender.CARBON_LOGFILE.layout.TenantPattern=%U%@%D [%T] [%S]
    log4j.appender.CARBON_LOGFILE.threshold=DEBUG
    # Log masking configuration. Please uncomment the following log4j property, if you need to mask any
    # information in your carbon logs.
    # When enabled, the logs will be matched with the  provided patterns and masked .
    # The 'path-to-masking-patterns' path should be an absolute file path to a properties file. This file should contain
    # the patterns that should be checked for masking as key value pairs. (mask-name=masking-regex-pattern)
    # If this file cannot be found, wso2-log-masking.properties file will be used as default. If the following
    # configuration is not enabled, no masking process will be applied.
    #log4j.appender.CARBON_LOGFILE.maskingPatternFile=path-to-masking-patterns
    
    log4j.appender.CARBON_SYS_LOG = org.apache.log4j.net.SyslogAppender
    log4j.appender.CARBON_SYS_LOG.layout=org.apache.log4j.PatternLayout
    log4j.appender.CARBON_SYS_LOG.layout.ConversionPattern=[%d] %5p {%c} - %x %m %n
    log4j.appender.CARBON_SYS_LOG.SyslogHost=localhost
    log4j.appender.CARBON_SYS_LOG.Facility=USER
    log4j.appender.CARBON_SYS_LOG.threshold=DEBUG
    
    # LOGEVENT is set to be a LogEventAppender using a PatternLayout to send logs to LOGEVENT 
    log4j.appender.LOGEVENT=org.wso2.carbon.logging.service.appender.LogEventAppender
    log4j.appender.LOGEVENT.url=tcp://10.100.3.103:7611
    log4j.appender.LOGEVENT.layout=org.wso2.carbon.utils.logging.TenantAwarePatternLayout
    log4j.appender.LOGEVENT.columnList=%T,%S,%A,%d,%c,%p,%m,%H,%I,%Stacktrace
    log4j.appender.LOGEVENT.userName=admin
    log4j.appender.LOGEVENT.password=admin
    #log4j.appender.LOGEVENT.password=secretAlias:Log4j.Appender.LOGEVENT.Password
    
    # Appender config to CARBON_TRACE_LOGFILE
    log4j.appender.CARBON_TRACE_LOGFILE=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.CARBON_TRACE_LOGFILE.File=${carbon.home}/repository/logs/${instance.log}/wso2carbon-trace-messages${instance.log}.log
    log4j.appender.CARBON_TRACE_LOGFILE.Append=true
    log4j.appender.CARBON_TRACE_LOGFILE.layout=org.wso2.carbon.utils.logging.TenantAwarePatternLayout
    log4j.appender.CARBON_TRACE_LOGFILE.layout.ConversionPattern=[%d] %P%5p {%c} - %x %m %n
    log4j.appender.CARBON_TRACE_LOGFILE.layout.TenantPattern=%U%@%D [%T] [%S]
    log4j.appender.CARBON_TRACE_LOGFILE.threshold=TRACE
    log4j.additivity.trace.messages=false
    
    # Appender config to AUDIT_LOGFILE
    log4j.appender.AUDIT_LOGFILE=org.wso2.carbon.utils.logging.appenders.CarbonDailyRollingFileAppender
    log4j.appender.AUDIT_LOGFILE.File=${carbon.home}/repository/logs/audit.log
    log4j.appender.AUDIT_LOGFILE.Append=true
    log4j.appender.AUDIT_LOGFILE.layout=org.wso2.carbon.utils.logging.TenantAwarePatternLayout
    log4j.appender.AUDIT_LOGFILE.layout.ConversionPattern=[%d] %P%5p {%c}- %x %m %n
    log4j.appender.AUDIT_LOGFILE.layout.TenantPattern=%U%@%D [%T] [%S]
    log4j.appender.AUDIT_LOGFILE.threshold=INFO
    log4j.additivity.AUDIT_LOG=false
    
    log4j.appender.DELETE_EVENT_LOGFILE=org.apache.log4j.FileAppender
    log4j.appender.DELETE_EVENT_LOGFILE.File=${carbon.home}/repository/logs/delete-event.log
    log4j.appender.DELETE_EVENT_LOGFILE.Append=true
    log4j.appender.DELETE_EVENT_LOGFILE.layout=org.apache.log4j.PatternLayout
    log4j.appender.DELETE_EVENT_LOGFILE.layout.ConversionPattern=%m %n
    log4j.appender.DELETE_EVENT_LOGFILE.threshold=INFO
    log4j.additivity.DELETE_EVENT_LOGFILE=false
    
    log4j.appender.TRANSACTION_LOGGER=org.apache.log4j.FileAppender
    log4j.appender.TRANSACTION_LOGGER.File=${carbon.home}/repository/logs/transaction.log
    log4j.appender.TRANSACTION_LOGGER.Append=true
    log4j.appender.TRANSACTION_LOGGER.layout=org.apache.log4j.PatternLayout
    log4j.appender.TRANSACTION_LOGGER.layout.ConversionPattern=[%d] - %m %n
    log4j.appender.TRANSACTION_LOGGER.threshold=INFO
    log4j.additivity.TRANSACTION_LOGGER=false
    
    # Appender config to send Atomikos transaction logs to new log file tm.out.
    log4j.appender.ATOMIKOS = org.apache.log4j.RollingFileAppender
    log4j.appender.ATOMIKOS.File = repository/logs/tm.out
    log4j.appender.ATOMIKOS.Append = true
    log4j.appender.ATOMIKOS.layout = org.apache.log4j.PatternLayout
    log4j.appender.ATOMIKOS.layout.ConversionPattern=%p %t %c - %m%n
    
    # Appender config to put correlation Log.
    log4j.logger.correlation=INFO, CORRELATION
    log4j.additivity.correlation=false
    log4j.appender.CORRELATION=org.apache.log4j.RollingFileAppender
    log4j.appender.CORRELATION.File=${carbon.home}/repository/logs/${instance.log}/correlation.log
    log4j.appender.CORRELATION.MaxFileSize=10MB
    log4j.appender.CORRELATION.layout=org.apache.log4j.PatternLayout
    log4j.appender.CORRELATION.Threshold=INFO
    log4j.appender.CORRELATION.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS}|%X{Correlation-ID}|%t|%m%n
    # This file is used to override the default logger settings, and is used to remove unwanted logs from Shindig appearing on the console.
    
    # Specification of Handler used by Console Logger
    handlers=java.util.logging.ConsoleHandler
    
    # Replacing default INFO level with SEVERE
    java.util.logging.ConsoleHandler.level=SEVERE
